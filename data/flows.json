[{"id":"731546c3ff1ebc34","type":"tab","label":"Display Subscribed Nodes","disabled":false,"info":"","env":[]},{"id":"toCaros","type":"tab","label":"toCaros","disabled":false,"info":"Flow for connection management in the toCaro system (automatically created)"},{"id":"584e7fb1ca4c2b5d","type":"mqtt-broker","name":"Local Mosquitto Server","broker":"localhost","port":1883,"clientid":"","autoConnect":true,"usetls":false,"protocolVersion":4,"keepalive":60,"cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"52cec3c5730bfdb3","type":"mqtt-broker","name":"Local Docker Mosquitto Server","broker":"mosquitto","port":1883,"clientid":"","autoConnect":true,"usetls":false,"protocolVersion":4,"keepalive":60,"cleansession":true,"autoUnsubscribe":true,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closeRetain":"false","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willRetain":"false","willPayload":"","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"fc577c2e33647d4b","type":"mqtt in","z":"731546c3ff1ebc34","name":"Subscribe to all Topics","topic":"#","qos":"2","datatype":"auto-detect","broker":"584e7fb1ca4c2b5d","nl":false,"rap":true,"rh":0,"inputs":0,"x":160,"y":60,"wires":[["61036e7e59eabd7b","5861e4137e50f0f5"]]},{"id":"61036e7e59eabd7b","type":"function","z":"731546c3ff1ebc34","name":"Save unique clients","func":"// Function node code for getting unique clients in the network\nvar clients = context.get('clients') || {};\nvar clientId = msg.topic.split('/')[0];\nif (!clientId) {\n    return null;\n}\n\n// Only pass the message if the client is not yet registered\nif (!clients[clientId]) {\n    clients[clientId] = true;\n    context.set('clients', clients);\n    msg.payload = clientId;\n    return msg;\n}\n\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nvar clients = context.get('clients');\nif (clients) {\n    console.log('Resetting saved Clients');\n    context.set('clients', {});\n}","finalize":"","libs":[],"x":450,"y":60,"wires":[["dd00a8154b3aeb29"]]},{"id":"133313c8466a7c13","type":"comment","z":"731546c3ff1ebc34","name":"","info":"This flow is meant to add new Nodes \nto the toCaro flow for each unique client, \nthat is connected to the mqtt network.\n","x":120,"y":120,"wires":[]},{"id":"dd00a8154b3aeb29","type":"client-manager","z":"731546c3ff1ebc34","name":"","flow":"toCaros","url":"http://127.0.0.1:1880/","x":700,"y":60,"wires":[[]]},{"id":"5861e4137e50f0f5","type":"router","z":"731546c3ff1ebc34","name":"","x":700,"y":120,"wires":[["711a52c18260cceb"]]},{"id":"711a52c18260cceb","type":"mqtt out","z":"731546c3ff1ebc34","name":"Send to ESP-32","topic":"","qos":"2","retain":"","respTopic":"","contentType":"","userProps":"","correl":"","expiry":"","broker":"584e7fb1ca4c2b5d","x":920,"y":120,"wires":[]},{"id":"ESP_32-W","type":"client","z":"toCaros","name":"ESP_32-W","mqttId":"ESP_32-W","x":130,"y":60,"wires":[[]]},{"id":"ESP_32-B","type":"client","z":"toCaros","name":"ESP_32-B","mqttId":"ESP_32-B","x":390,"y":60,"wires":[[]]}]